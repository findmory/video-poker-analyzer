import numpy as np
import matplotlib.pyplot as plt
from game_odds import GAMES

# Run multiple simulations
num_simulations = 10
results = []
game_name = "8/5 JoB"


def run_simulation(num_bets=100000, initial_balance=0):
    # Set up the payoffs and probabilities
    payoffs = np.array(GAMES[game_name]["payouts"])
    probabilities = np.array(GAMES[game_name]["probabilities"])

    # Initialize tracking variables
    balance = initial_balance
    highest_balance = balance
    lowest_balance = balance
    balance_history = [balance]

    # Run simulation
    for _ in range(num_bets):
        # Make a bet (costs 1 unit)
        balance -= 1

        # Determine outcome using numpy's random choice
        outcome = np.random.choice(payoffs, p=probabilities)

        # Add winnings to balance
        balance += outcome

        # Update highest and lowest points
        highest_balance = max(highest_balance, balance)
        lowest_balance = min(lowest_balance, balance)

        # Store balance for history
        balance_history.append(balance)

    return {
        "final_balance": balance,
        "highest_point": highest_balance,
        "lowest_point": lowest_balance,
        "balance_history": balance_history,
    }


def plot_simulation_results(results):
    plt.figure(figsize=(15, 10))

    # Plot individual simulation paths
    for i, result in enumerate(results):
        plt.plot(
            result["balance_history"], alpha=0.3, label=f"Simulation {i+1}"
        )

    # Add horizontal line at y=0
    plt.axhline(y=0, color="r", linestyle="--", alpha=0.5)

    # Customize the plot
    plt.title(
        "Balance Over Time - Multiple Monte Carlo Simulations\n" f"{game_name}"
    )
    plt.xlabel("Number of Bets")
    plt.ylabel("Balance")
    plt.grid(True, alpha=0.3)
    plt.legend()

    # Show the plot
    plt.show()


for i in range(num_simulations):
    result = run_simulation()
    results.append(result)
    print(f"\nSimulation {i+1} Results:")
    print(f"Final Balance: {result['final_balance']:.2f} units")
    print(f"Highest Point: {result['highest_point']:.2f} units")
    print(f"Lowest Point: {result['lowest_point']:.2f} units")

# Calculate average results
avg_final = sum(r["final_balance"] for r in results) / num_simulations
avg_highest = sum(r["highest_point"] for r in results) / num_simulations
avg_lowest = sum(r["lowest_point"] for r in results) / num_simulations

print("\nAverage Results Over All Simulations:")
print(f"Average Final Balance: {avg_final:.2f} units")
print(f"Average Highest Point: {avg_highest:.2f} units")
print(f"Average Lowest Point: {avg_lowest:.2f} units")

# Plot the results
plot_simulation_results(results)
